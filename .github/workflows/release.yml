name: Build and Release (main branch)

on:
  push:
    branches:
      - main # Run on every push to the main branch

jobs:
  build:
    name: Build for ${{ matrix.label }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            label: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
            label: macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            label: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cuniq${{ matrix.ext }} dist/
          cd dist
          zip cuniq-${{ matrix.label }}.zip cuniq${{ matrix.ext }}

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          Copy-Item "target/${{ matrix.target }}/release/cuniq${{ matrix.ext }}" -Destination "dist/"
          Compress-Archive -Path "dist/cuniq${{ matrix.ext }}" -DestinationPath "dist/cuniq-${{ matrix.label }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cuniq-${{ matrix.label }}
          path: dist/cuniq-${{ matrix.label }}.zip

  release:
    name: Update "Latest" GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display downloaded files
        run: ls -R dist

      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: "Latest Build"
          draft: false
          prerelease: true
          files: dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
